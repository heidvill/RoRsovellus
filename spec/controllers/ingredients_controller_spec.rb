require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe IngredientsController, type: :controller do
  let!(:user) {FactoryGirl.create :user}
  let!(:subsection_ingredient) {FactoryGirl.create :subsection_ingredient}

  before :each do
    allow(controller).to receive_messages(:current_user => user)
  end

  # This should return the minimal set of attributes required to create a valid
  # Ingredient. As you add validations to Ingredient, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {name: "lettuce"}
  }

  let(:invalid_attributes) {
    {name: ""}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # IngredientsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all ingredients as @ingredients" do
      ingredient = Ingredient.create! valid_attributes
      ingredient.subsection_ingredients << subsection_ingredient
      get :index, params: {}, session: valid_session
      expect(assigns(:ingredients)).to eq([ingredient])
    end
  end

  describe "GET #show" do
    it "assigns the requested ingredient as @ingredient" do
      ingredient = Ingredient.create! valid_attributes
      get :show, params: {id: ingredient.to_param}, session: valid_session
      expect(assigns(:ingredient)).to eq(ingredient)
    end
  end

  describe "GET #edit" do
    it "assigns the requested ingredient as @ingredient" do
      ingredient = Ingredient.create! valid_attributes
      get :edit, params: {id: ingredient.to_param}, session: valid_session
      expect(assigns(:ingredient)).to eq(ingredient)
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {name: "cucumber"}
      }

      it "updates the requested ingredient" do
        ingredient = Ingredient.create! valid_attributes
        put :update, params: {id: ingredient.to_param, ingredient: new_attributes}, session: valid_session
        ingredient.reload
        expect(assigns(:ingredient)[:name]).to eq(new_attributes[:name])
      end

      it "assigns the requested ingredient as @ingredient" do
        ingredient = Ingredient.create! valid_attributes
        put :update, params: {id: ingredient.to_param, ingredient: valid_attributes}, session: valid_session
        expect(assigns(:ingredient)).to eq(ingredient)
      end

      it "redirects to all ingredients" do
        ingredient = Ingredient.create! valid_attributes
        put :update, params: {id: ingredient.to_param, ingredient: valid_attributes}, session: valid_session
        expect(response).to redirect_to(ingredients_path)
      end
    end

    context "with invalid params" do
      it "assigns the ingredient as @ingredient" do
        ingredient = Ingredient.create! valid_attributes
        put :update, params: {id: ingredient.to_param, ingredient: invalid_attributes}, session: valid_session
        expect(assigns(:ingredient)).to eq(ingredient)
      end

      it "re-renders the 'edit' template" do
        ingredient = Ingredient.create! valid_attributes
        put :update, params: {id: ingredient.to_param, ingredient: invalid_attributes}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

end
