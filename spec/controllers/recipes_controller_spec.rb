require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RecipesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Recipe. As you add validations to Recipe, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {name: "salad",
     amount: 3,
     duration: 15,
     description: "Wash and cut"}
  }

  let(:invalid_attributes) {
    {name: "s",
     amount: 0,
     duration: 0,
     description: "W"
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CategoriesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all recipes as @recipes" do
      recipe = Recipe.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:recipes)).to eq([recipe])
    end
  end

  describe "GET #show" do
    it "assigns the requested recipe as @recipe" do
      recipe = Recipe.create! valid_attributes
      get :show, params: {id: recipe.to_param}, session: valid_session
      expect(assigns(:recipe)).to eq(recipe)
    end
  end

  describe "GET #new" do
    it "assigns a new recipe as @recipe" do
      get :new, params: {}, session: valid_session
      expect(assigns(:recipe)).to be_a_new(Recipe)
    end
  end

  describe "GET #edit" do
    it "assigns the requested recipe as @recipe" do
      recipe = Recipe.create! valid_attributes
      get :edit, params: {id: recipe.to_param}, session: valid_session
      expect(assigns(:recipe)).to eq(recipe)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Recipe" do #js:true ?
        expect {
          xhr :post, :create, data:{name: "Cake", amount: "4", time_h:"1", time_min: "30",
                                    subsections:[{title:'cake', ings:[{amount: 5, unit:'dl', name: 'flour'}]}],
                                    description:"Mix", }
         }.to change(Recipe, :count).by(1)
        #post :create, params: {ingredient: valid_attributes}, session: valid_session
        # post :create, xhr: true, params: {data:{name: "Cake", amount: "4", time_h:"1", time_min: "30", description:"Mix"}}
      end

      it "assigns a newly created recipe as @recipe" do
        xhr :post, :create, data:{name: "Cake", amount: "4", time_h:"1", time_min: "30",
                                  subsections:[{title:'cake', ings:[{amount: 5, unit:'dl', name: 'flour'}]}],
                                  description:"Mix"}
        expect(assigns(:recipe)).to be_a(Recipe)
        expect(assigns(:recipe)).to be_persisted
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved recipe as @recipe" do
        xhr :post, :create, data:{name: "", amount: "4", time_h:"1", time_min: "30",
                                  subsections:[{title:'cake', ings:[{amount: 5, unit:'dl', name: ''}]}],
                                  description:""}
        expect(assigns(:recipe)).to be_a_new(Recipe)
      end

      it "gives unprocessable entity" do
        xhr :post, :create, data:{name: "", amount: "4", time_h:"1", time_min: "30",
                                  subsections:[{title:'cake', ings:[{amount: 5, unit:'dl', name: ''}]}],
                                  description:""}
        expect(response.status).to eq(422)
      end
    end
  end


  describe "DELETE #destroy" do
    it "destroys the requested recipe" do
      recipe = Recipe.create! valid_attributes
      expect {
        delete :destroy, params: {id: recipe.to_param}, session: valid_session
      }.to change(Recipe, :count).by(-1)
    end

    it "redirects to the recipes list" do
      recipe = Recipe.create! valid_attributes
      delete :destroy, params: {id: recipe.to_param}, session: valid_session
      expect(response).to redirect_to(recipes_url)
    end
  end

end
